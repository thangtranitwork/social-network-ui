
// ƒê·ªãnh nghƒ©a c√°c th√¥ng b√°o l·ªói b·∫±ng ti·∫øng Vi·ªát
export const ERROR_MESSAGES = {
  // Account errors (1000-1999)
  1000: "T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i",
  1001: "T√†i kho·∫£n ch∆∞a ƒë∆∞·ª£c x√°c th·ª±c",
  1002: "T√†i kho·∫£n ƒë√£ b·ªã kh√≥a",
  1003: "X√°c th·ª±c th·∫•t b·∫°i",
  1004: "M·∫≠t kh·∫©u kh√¥ng h·ª£p l·ªá",
  1005: "Email kh√¥ng h·ª£p l·ªá",
  1006: "Email l√† b·∫Øt bu·ªôc",
  1007: "M·∫≠t kh·∫©u l√† b·∫Øt bu·ªôc",
  1008: "Kh√¥ng t√¨m th·∫•y m√£ x√°c th·ª±c",
  1009: "M√£ x√°c th·ª±c kh√¥ng ƒë√∫ng ho·∫∑c ƒë√£ h·∫øt h·∫°n",
  1010: "Refresh token l√† b·∫Øt bu·ªôc",
  1011: "Refresh token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n",
  1012: "T√†i kho·∫£n ƒë√£ t·ªìn t·∫°i",
  1013: "Token kh√¥ng h·ª£p l·ªá",
  1014: "Token ƒë√£ h·∫øt h·∫°n",
  1015: "M√£ x√°c th·ª±c l√† b·∫Øt bu·ªôc",
  1016: "T√†i kho·∫£n ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c",

  // User profile errors (2000-2999)
  2000: "H·ªç l√† b·∫Øt bu·ªôc",
  2001: "T√™n l√† b·∫Øt bu·ªôc",
  2002: "Ng√†y sinh l√† b·∫Øt bu·ªôc",
  2003: "B·∫°n ph·∫£i tr√™n 16 tu·ªïi",
  2004: "H·ªç qu√° d√†i",
  2005: "T√™n qu√° d√†i",
  2006: "Ch∆∞a ƒë·ªß 30 ng√†y k·ªÉ t·ª´ l·∫ßn thay ƒë·ªïi ng√†y sinh g·∫ßn nh·∫•t",
  2007: "Ch∆∞a ƒë·ªß 30 ng√†y k·ªÉ t·ª´ l·∫ßn thay ƒë·ªïi t√™n g·∫ßn nh·∫•t",
  2008: "Ch∆∞a ƒë·ªß 30 ng√†y k·ªÉ t·ª´ l·∫ßn thay ƒë·ªïi username g·∫ßn nh·∫•t",
  2009: "Email ch∆∞a ƒë∆∞·ª£c x√°c th·ª±c",
  2010: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i",
  2011: "Username l√† b·∫Øt bu·ªôc",
  2012: "Username ƒë√£ t·ªìn t·∫°i",
  2013: "·∫¢nh ƒë·∫°i di·ªán l√† b·∫Øt bu·ªôc",
  2014: "Kh√¥ng c√≥ g√¨ thay ƒë·ªïi",

  // File storage errors (3000-3999)
  3000: "L·ªói kh·ªüi t·∫°o b·ªô nh·ªõ",
  3001: "File l√† b·∫Øt bu·ªôc",
  3002: "File kh√¥ng h·ª£p l·ªá",
  3003: "T·∫£i file th·∫•t b·∫°i",
  3004: "Kh√¥ng t√¨m th·∫•y file",
  3005: "X√≥a file th·∫•t b·∫°i",
  3006: "T·∫£i file th·∫•t b·∫°i",
  3007: "Ch·ªâ ch·∫•p nh·∫≠n file h√¨nh ·∫£nh",
  3008: "K√≠ch th∆∞·ªõc file kh√¥ng h·ª£p l·ªá",
  3009: "Danh s√°ch ch·ª©a file kh√¥ng h·ª£p l·ªá",
  3010: "Ch·ªâ ch·∫•p nh·∫≠n file h√¨nh ·∫£nh ho·∫∑c video",

  // Friend/relationship errors (4000-4999)
  4000: "Kh√¥ng th·ªÉ th·ª±c hi·ªán h√†nh ƒë·ªông v·ªõi ch√≠nh m√¨nh",
  4001: "G·ª≠i l·ªùi m·ªùi k·∫øt b·∫°n th·∫•t b·∫°i",
  4002: "ƒê√£ ƒë·∫°t gi·ªõi h·∫°n g·ª≠i l·ªùi m·ªùi k·∫øt b·∫°n",
  4003: "ƒê√£ ƒë·∫°t gi·ªõi h·∫°n nh·∫≠n l·ªùi m·ªùi k·∫øt b·∫°n",
  4004: "Kh√¥ng t√¨m th·∫•y l·ªùi m·ªùi",
  4005: "Ch·∫•p nh·∫≠n l·ªùi m·ªùi th·∫•t b·∫°i",
  4006: "ƒê√£ ch·∫∑n ng∆∞·ªùi d√πng n√†y",
  4007: "B·∫°n ƒë√£ b·ªã ch·∫∑n",
  4008: "Ch∆∞a ch·∫∑n ng∆∞·ªùi d√πng n√†y",
  4009: "ƒê√£ ƒë·∫°t gi·ªõi h·∫°n ch·∫∑n",
  4010: "Kh√¥ng th·ªÉ ch·∫∑n ch√≠nh m√¨nh",
  4011: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng b·ªã ch·∫∑n",
  4012: "Kh√¥ng t√¨m th·∫•y b·∫°n b√®",

  // Post errors (5000-5999)
  5000: "N·ªôi dung b√†i vi·∫øt v√† file ƒë√≠nh k√®m kh√¥ng th·ªÉ ƒë·ªÉ tr·ªëng",
  5001: "ƒê·ªô d√†i n·ªôi dung b√†i vi·∫øt kh√¥ng h·ª£p l·ªá",
  5002: "S·ªë l∆∞·ª£ng file ƒë√≠nh k√®m kh√¥ng h·ª£p l·ªá",
  5003: "Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt",
  5005: "Ch·ªâ c√≥ th·ªÉ chia s·∫ª b√†i vi·∫øt c√¥ng khai",
  5006: "Quy·ªÅn ri√™ng t∆∞ kh√¥ng thay ƒë·ªïi",
  5007: "X√≥a file ƒë√≠nh k√®m kh√¥ng h·ª£p l·ªá",
  5008: "N·ªôi dung b√†i vi·∫øt kh√¥ng thay ƒë·ªïi",
  5009: "ƒê√£ th√≠ch b√†i vi·∫øt n√†y",
  5010: "Ch∆∞a th√≠ch b√†i vi·∫øt n√†y",
  5011: "B√†i vi·∫øt ƒë√£ b·ªã x√≥a",

  // Comment errors (6000-6999)
  6000: "Kh√¥ng t√¨m th·∫•y b√¨nh lu·∫≠n",
  6001: "N·ªôi dung b√¨nh lu·∫≠n v√† file ƒë√≠nh k√®m kh√¥ng th·ªÉ ƒë·ªÉ tr·ªëng",
  6002: "ƒê·ªô d√†i n·ªôi dung b√¨nh lu·∫≠n kh√¥ng h·ª£p l·ªá",
  6003: "ID b√†i vi·∫øt l√† b·∫Øt bu·ªôc",
  6004: "ID b√¨nh lu·∫≠n g·ªëc l√† b·∫Øt bu·ªôc",
  6005: "ƒê√£ th√≠ch b√¨nh lu·∫≠n n√†y",
  6006: "Ch∆∞a th√≠ch b√¨nh lu·∫≠n n√†y",
  6007: "Kh√¥ng th·ªÉ tr·∫£ l·ªùi b√¨nh lu·∫≠n ƒë√£ ƒë∆∞·ª£c tr·∫£ l·ªùi",

  // Chat/Message errors (7000-7999)
  7000: "Kh√¥ng t√¨m th·∫•y cu·ªôc tr√≤ chuy·ªán",
  7001: "Username l√† b·∫Øt bu·ªôc",
  7002: "ƒê·ªô d√†i n·ªôi dung tin nh·∫Øn kh√¥ng h·ª£p l·ªá",
  7003: "ID cu·ªôc tr√≤ chuy·ªán v√† ID ng∆∞·ªùi d√πng kh√¥ng th·ªÉ ƒë·ªÉ tr·ªëng",
  7004: "Kh√¥ng t√¨m th·∫•y tin nh·∫Øn",
  7005: "Kh√¥ng th·ªÉ x√≥a tin nh·∫Øn",
  7006: "N·ªôi dung tin nh·∫Øn vƒÉn b·∫£n l√† b·∫Øt bu·ªôc",
  7007: "N·ªôi dung tin nh·∫Øn vƒÉn b·∫£n kh√¥ng thay ƒë·ªïi",
  7008: "Kh√¥ng th·ªÉ ch·ªânh s·ª≠a tin nh·∫Øn file",
  7009: "Kh√¥ng th·ªÉ ch·ªânh s·ª≠a tin nh·∫Øn",
  7010: "Tin nh·∫Øn file l√† b·∫Øt bu·ªôc",
  7011: "B·∫°n ƒëang trong cu·ªôc g·ªçi",
  7012: "Ng∆∞·ªùi nh·∫≠n ƒëang trong cu·ªôc g·ªçi",
  7013: "Kh√¥ng t√¨m th·∫•y cu·ªôc g·ªçi",
  7014: "Ch∆∞a s·∫µn s√†ng cho cu·ªôc g·ªçi",

  // Search errors (9000-9999)
  9000: "T·ª´ kh√≥a t√¨m ki·∫øm l√† b·∫Øt bu·ªôc",
  9992: "K√™nh websocket kh√¥ng h·ª£p l·ªá",
  9993: "Ch·ªâ ch·∫•p nh·∫≠n ch·ªØ c√°i",
  9994: "Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p",
  9995: "D·ªØ li·ªáu ƒë·∫ßu v√†o kh√¥ng h·ª£p l·ªá",
  9996: "UUID kh√¥ng h·ª£p l·ªá",
  9997: "Ch∆∞a ƒëƒÉng nh·∫≠p",
  9998: "Kh√¥ng t√¨m th·∫•y t√†i nguy√™n",
  9999: "C√≥ l·ªói x·∫£y ra",
};

/**
 * X·ª≠ l√Ω l·ªói API v√† tr·∫£ v·ªÅ th√¥ng b√°o l·ªói ph√π h·ª£p
 * @param {Error} error - L·ªói t·ª´ API
 * @returns {string} Th√¥ng b√°o l·ªói ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω
 */
export function parseApiError(error) {
  console.log('üîç Parsing API error:', error);
  
  // Ki·ªÉm tra l·ªói c√≥ response kh√¥ng
  if (error.response) {
    const { data, status } = error.response;
    
    // Ki·ªÉm tra c√≥ m√£ l·ªói t·ª´ server kh√¥ng
    if (data && data.code) {
      const errorMessage = ERROR_MESSAGES[data.code];
      if (errorMessage) {
        console.log(`üìã Found error message for code ${data.code}: ${errorMessage}`);
        return errorMessage;
      }
      
      // N·∫øu kh√¥ng t√¨m th·∫•y m√£ l·ªói trong danh s√°ch, d√πng message t·ª´ server
      if (data.message) {
        console.log(`üìã Using server message: ${data.message}`);
        return data.message;
      }
    }
    
    // X·ª≠ l√Ω theo HTTP status code
    switch (status) {
      case 400:
        return "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá";
      case 401:
        return "Ch∆∞a ƒëƒÉng nh·∫≠p ho·∫∑c phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n";
      case 403:
        return "Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p";
      case 404:
        return "Kh√¥ng t√¨m th·∫•y t√†i nguy√™n";
      case 409:
        return "D·ªØ li·ªáu ƒë√£ t·ªìn t·∫°i";
      case 422:
        return "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá";
      case 429:
        return "Qu√° nhi·ªÅu y√™u c·∫ßu, vui l√≤ng th·ª≠ l·∫°i sau";
      case 500:
        return "L·ªói m√°y ch·ªß, vui l√≤ng th·ª≠ l·∫°i sau";
      case 502:
        return "L·ªói k·∫øt n·ªëi m√°y ch·ªß";
      case 503:
        return "D·ªãch v·ª• t·∫°m th·ªùi kh√¥ng kh·∫£ d·ª•ng";
      default:
        return `L·ªói ${status}: ${data?.message || 'C√≥ l·ªói x·∫£y ra'}`;
    }
  }
  
  // X·ª≠ l√Ω l·ªói network
  if (error.request) {
    console.log('üåê Network error:', error.message);
    return "L·ªói k·∫øt n·ªëi m·∫°ng. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi internet";
  }
  
  // X·ª≠ l√Ω l·ªói kh√°c
  console.log('‚ùå Unknown error:', error.message);
  return error.message || "C√≥ l·ªói kh√¥ng x√°c ƒë·ªãnh x·∫£y ra";
}

/**
 * X·ª≠ l√Ω l·ªói API v·ªõi chi ti·∫øt h∆°n, tr·∫£ v·ªÅ object
 * @param {Error} error - L·ªói t·ª´ API
 * @returns {Object} Object ch·ª©a th√¥ng tin l·ªói chi ti·∫øt
 */
export function parseApiErrorDetailed(error) {
  const message = parseApiError(error);
  
  return {
    message,
    code: error.response?.data?.code || null,
    status: error.response?.status || null,
    type: error.response ? 'api' : error.request ? 'network' : 'unknown',
    originalError: error
  };
}

/**
 * Ki·ªÉm tra xem c√≥ ph·∫£i l·ªói x√°c th·ª±c kh√¥ng
 * @param {Error} error - L·ªói t·ª´ API
 * @returns {boolean} True n·∫øu l√† l·ªói x√°c th·ª±c
 */
export function isAuthenticationError(error) {
  if (!error.response) return false;
  
  const { status, data } = error.response;
  const authErrorCodes = [1001, 1003, 1011, 1013, 1014, 2009, 9997];
  
  return status === 401 || (data?.code && authErrorCodes.includes(data.code));
}

/**
 * Ki·ªÉm tra xem c√≥ ph·∫£i l·ªói validation kh√¥ng
 * @param {Error} error - L·ªói t·ª´ API
 * @returns {boolean} True n·∫øu l√† l·ªói validation
 */
export function isValidationError(error) {
  if (!error.response) return false;
  
  const { status, data } = error.response;
  const validationErrorCodes = [
    1004, 1005, 1006, 1007, 1015, // Auth validation
    2000, 2001, 2002, 2003, 2004, 2005, 2011, 2013, // User validation
    3001, 3002, 3007, 3008, 3009, 3010, // File validation
    5000, 5001, 5002, // Post validation
    6001, 6002, 6003, 6004, // Comment validation
    7001, 7002, 7006, 7010, // Message validation
    9000, 9993, 9995, 9996 // General validation
  ];
  
  return status === 400 || status === 422 || (data?.code && validationErrorCodes.includes(data.code));
}